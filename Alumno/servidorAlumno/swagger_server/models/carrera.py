# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Carrera(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nombre: str=None, codigo: int=None, cred_transversales: int=None, cred_obligatorios: int=None, cred_optativos: int=None, cred_totales: int=None):
        """
        Carrera - a model defined in Swagger

        :param nombre: The nombre of this Carrera.
        :type nombre: str
        :param codigo: The codigo of this Carrera.
        :type codigo: int
        :param cred_transversales: The cred_transversales of this Carrera.
        :type cred_transversales: int
        :param cred_obligatorios: The cred_obligatorios of this Carrera.
        :type cred_obligatorios: int
        :param cred_optativos: The cred_optativos of this Carrera.
        :type cred_optativos: int
        :param cred_totales: The cred_totales of this Carrera.
        :type cred_totales: int
        """
        self.swagger_types = {
            'nombre': str,
            'codigo': int,
            'cred_transversales': int,
            'cred_obligatorios': int,
            'cred_optativos': int,
            'cred_totales': int
        }

        self.attribute_map = {
            'nombre': 'nombre',
            'codigo': 'codigo',
            'cred_transversales': 'credTransversales',
            'cred_obligatorios': 'credObligatorios',
            'cred_optativos': 'credOptativos',
            'cred_totales': 'credTotales'
        }

        self._nombre = nombre
        self._codigo = codigo
        self._cred_transversales = cred_transversales
        self._cred_obligatorios = cred_obligatorios
        self._cred_optativos = cred_optativos
        self._cred_totales = cred_totales

    @classmethod
    def from_dict(cls, dikt) -> 'Carrera':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Carrera of this Carrera.
        :rtype: Carrera
        """
        return deserialize_model(dikt, cls)

    @property
    def nombre(self) -> str:
        """
        Gets the nombre of this Carrera.

        :return: The nombre of this Carrera.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """
        Sets the nombre of this Carrera.

        :param nombre: The nombre of this Carrera.
        :type nombre: str
        """
        allowed_values = ["Ingenieria informatica", "Ingenieria de telecomunicaciones", "Ingenieria industrial"]
        if nombre not in allowed_values:
            raise ValueError(
                "Invalid value for `nombre` ({0}), must be one of {1}"
                .format(nombre, allowed_values)
            )

        self._nombre = nombre

    @property
    def codigo(self) -> int:
        """
        Gets the codigo of this Carrera.

        :return: The codigo of this Carrera.
        :rtype: int
        """
        return self._codigo

    @codigo.setter
    def codigo(self, codigo: int):
        """
        Sets the codigo of this Carrera.

        :param codigo: The codigo of this Carrera.
        :type codigo: int
        """

        self._codigo = codigo

    @property
    def cred_transversales(self) -> int:
        """
        Gets the cred_transversales of this Carrera.

        :return: The cred_transversales of this Carrera.
        :rtype: int
        """
        return self._cred_transversales

    @cred_transversales.setter
    def cred_transversales(self, cred_transversales: int):
        """
        Sets the cred_transversales of this Carrera.

        :param cred_transversales: The cred_transversales of this Carrera.
        :type cred_transversales: int
        """

        self._cred_transversales = cred_transversales

    @property
    def cred_obligatorios(self) -> int:
        """
        Gets the cred_obligatorios of this Carrera.

        :return: The cred_obligatorios of this Carrera.
        :rtype: int
        """
        return self._cred_obligatorios

    @cred_obligatorios.setter
    def cred_obligatorios(self, cred_obligatorios: int):
        """
        Sets the cred_obligatorios of this Carrera.

        :param cred_obligatorios: The cred_obligatorios of this Carrera.
        :type cred_obligatorios: int
        """

        self._cred_obligatorios = cred_obligatorios

    @property
    def cred_optativos(self) -> int:
        """
        Gets the cred_optativos of this Carrera.

        :return: The cred_optativos of this Carrera.
        :rtype: int
        """
        return self._cred_optativos

    @cred_optativos.setter
    def cred_optativos(self, cred_optativos: int):
        """
        Sets the cred_optativos of this Carrera.

        :param cred_optativos: The cred_optativos of this Carrera.
        :type cred_optativos: int
        """

        self._cred_optativos = cred_optativos

    @property
    def cred_totales(self) -> int:
        """
        Gets the cred_totales of this Carrera.

        :return: The cred_totales of this Carrera.
        :rtype: int
        """
        return self._cred_totales

    @cred_totales.setter
    def cred_totales(self, cred_totales: int):
        """
        Sets the cred_totales of this Carrera.

        :param cred_totales: The cred_totales of this Carrera.
        :type cred_totales: int
        """

        self._cred_totales = cred_totales

