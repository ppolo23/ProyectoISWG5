# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Alumno(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dni: str=None, nombre: str=None, ape1: str=None, ape2: str=None, fecha: str=None, correo: str=None, asignaturas: List[str]=None, grado: str=None, cred_obligatorios: int=None, cred_transversales: int=None, cred_optativos: int=None):
        """
        Alumno - a model defined in Swagger

        :param dni: The dni of this Alumno.
        :type dni: str
        :param nombre: The nombre of this Alumno.
        :type nombre: str
        :param ape1: The ape1 of this Alumno.
        :type ape1: str
        :param ape2: The ape2 of this Alumno.
        :type ape2: str
        :param fecha: The fecha of this Alumno.
        :type fecha: str
        :param correo: The correo of this Alumno.
        :type correo: str
        :param asignaturas: The asignaturas of this Alumno.
        :type asignaturas: List[str]
        :param grado: The grado of this Alumno.
        :type grado: str
        :param cred_obligatorios: The cred_obligatorios of this Alumno.
        :type cred_obligatorios: int
        :param cred_transversales: The cred_transversales of this Alumno.
        :type cred_transversales: int
        :param cred_optativos: The cred_optativos of this Alumno.
        :type cred_optativos: int
        """
        self.swagger_types = {
            'dni': str,
            'nombre': str,
            'ape1': str,
            'ape2': str,
            'fecha': str,
            'correo': str,
            'asignaturas': List[str],
            'grado': str,
            'cred_obligatorios': int,
            'cred_transversales': int,
            'cred_optativos': int
        }

        self.attribute_map = {
            'dni': 'dni',
            'nombre': 'nombre',
            'ape1': 'ape1',
            'ape2': 'ape2',
            'fecha': 'fecha',
            'correo': 'correo',
            'asignaturas': 'asignaturas',
            'grado': 'grado',
            'cred_obligatorios': 'credObligatorios',
            'cred_transversales': 'credTransversales',
            'cred_optativos': 'credOptativos'
        }

        self._dni = dni
        self._nombre = nombre
        self._ape1 = ape1
        self._ape2 = ape2
        self._fecha = fecha
        self._correo = correo
        self._asignaturas = asignaturas
        self._grado = grado
        self._cred_obligatorios = cred_obligatorios
        self._cred_transversales = cred_transversales
        self._cred_optativos = cred_optativos

    @classmethod
    def from_dict(cls, dikt) -> 'Alumno':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Alumno of this Alumno.
        :rtype: Alumno
        """
        return deserialize_model(dikt, cls)

    @property
    def dni(self) -> str:
        """
        Gets the dni of this Alumno.

        :return: The dni of this Alumno.
        :rtype: str
        """
        return self._dni

    @dni.setter
    def dni(self, dni: str):
        """
        Sets the dni of this Alumno.

        :param dni: The dni of this Alumno.
        :type dni: str
        """

        self._dni = dni

    @property
    def nombre(self) -> str:
        """
        Gets the nombre of this Alumno.

        :return: The nombre of this Alumno.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """
        Sets the nombre of this Alumno.

        :param nombre: The nombre of this Alumno.
        :type nombre: str
        """

        self._nombre = nombre

    @property
    def ape1(self) -> str:
        """
        Gets the ape1 of this Alumno.

        :return: The ape1 of this Alumno.
        :rtype: str
        """
        return self._ape1

    @ape1.setter
    def ape1(self, ape1: str):
        """
        Sets the ape1 of this Alumno.

        :param ape1: The ape1 of this Alumno.
        :type ape1: str
        """

        self._ape1 = ape1

    @property
    def ape2(self) -> str:
        """
        Gets the ape2 of this Alumno.

        :return: The ape2 of this Alumno.
        :rtype: str
        """
        return self._ape2

    @ape2.setter
    def ape2(self, ape2: str):
        """
        Sets the ape2 of this Alumno.

        :param ape2: The ape2 of this Alumno.
        :type ape2: str
        """

        self._ape2 = ape2

    @property
    def fecha(self) -> str:
        """
        Gets the fecha of this Alumno.

        :return: The fecha of this Alumno.
        :rtype: str
        """
        return self._fecha

    @fecha.setter
    def fecha(self, fecha: str):
        """
        Sets the fecha of this Alumno.

        :param fecha: The fecha of this Alumno.
        :type fecha: str
        """

        self._fecha = fecha

    @property
    def correo(self) -> str:
        """
        Gets the correo of this Alumno.

        :return: The correo of this Alumno.
        :rtype: str
        """
        return self._correo

    @correo.setter
    def correo(self, correo: str):
        """
        Sets the correo of this Alumno.

        :param correo: The correo of this Alumno.
        :type correo: str
        """

        self._correo = correo

    @property
    def asignaturas(self) -> List[str]:
        """
        Gets the asignaturas of this Alumno.

        :return: The asignaturas of this Alumno.
        :rtype: List[str]
        """
        return self._asignaturas

    @asignaturas.setter
    def asignaturas(self, asignaturas: List[str]):
        """
        Sets the asignaturas of this Alumno.

        :param asignaturas: The asignaturas of this Alumno.
        :type asignaturas: List[str]
        """

        self._asignaturas = asignaturas

    @property
    def grado(self) -> str:
        """
        Gets the grado of this Alumno.

        :return: The grado of this Alumno.
        :rtype: str
        """
        return self._grado

    @grado.setter
    def grado(self, grado: str):
        """
        Sets the grado of this Alumno.

        :param grado: The grado of this Alumno.
        :type grado: str
        """

        self._grado = grado

    @property
    def cred_obligatorios(self) -> int:
        """
        Gets the cred_obligatorios of this Alumno.

        :return: The cred_obligatorios of this Alumno.
        :rtype: int
        """
        return self._cred_obligatorios

    @cred_obligatorios.setter
    def cred_obligatorios(self, cred_obligatorios: int):
        """
        Sets the cred_obligatorios of this Alumno.

        :param cred_obligatorios: The cred_obligatorios of this Alumno.
        :type cred_obligatorios: int
        """

        self._cred_obligatorios = cred_obligatorios

    @property
    def cred_transversales(self) -> int:
        """
        Gets the cred_transversales of this Alumno.

        :return: The cred_transversales of this Alumno.
        :rtype: int
        """
        return self._cred_transversales

    @cred_transversales.setter
    def cred_transversales(self, cred_transversales: int):
        """
        Sets the cred_transversales of this Alumno.

        :param cred_transversales: The cred_transversales of this Alumno.
        :type cred_transversales: int
        """

        self._cred_transversales = cred_transversales

    @property
    def cred_optativos(self) -> int:
        """
        Gets the cred_optativos of this Alumno.

        :return: The cred_optativos of this Alumno.
        :rtype: int
        """
        return self._cred_optativos

    @cred_optativos.setter
    def cred_optativos(self, cred_optativos: int):
        """
        Sets the cred_optativos of this Alumno.

        :param cred_optativos: The cred_optativos of this Alumno.
        :type cred_optativos: int
        """

        self._cred_optativos = cred_optativos

